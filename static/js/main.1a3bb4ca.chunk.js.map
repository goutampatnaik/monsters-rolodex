{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","key","id","alt","src","name","email","CardList","monsters","map","SearchBox","searchField","onSearchChange","placeholder","type","value","onChange","App","useState","setMonsters","setSearchField","useEffect","fetch","then","response","json","users","event","target","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8TAmBeA,MAff,YAA4B,IAAZC,EAAW,EAAXA,QACf,OACC,oCACC,yBAAKC,UAAU,iBAAiBC,IAAKF,EAAQG,IAC5C,yBACCC,IAAI,UACJC,IAAG,+BAA0BL,EAAQG,GAAlC,4BAEJ,4BAAKH,EAAQM,MACb,2BAAIN,EAAQO,U,MCGDC,MAVf,YAAiC,IAAbC,EAAY,EAAZA,SACnB,OACC,oCACC,yBAAKR,UAAU,aACbQ,GAAYA,EAASC,KAAI,SAAAV,GAAO,OAAI,kBAAC,EAAD,CAAMA,QAASA,U,MCOzCW,MAbf,YAAqD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eACjC,OACC,oCACC,2BACCZ,UAAU,SACVa,YAAY,SACZC,KAAK,SACLC,MAAOJ,EACPK,SAAUJ,MCsBCK,MA7Bf,WAAgB,IAAD,EACkBC,mBAAS,MAD3B,mBACPV,EADO,KACGW,EADH,OAEwBD,mBAAS,IAFjC,mBAEPP,EAFO,KAEMS,EAFN,KAcd,OAVAC,qBAAU,WACTC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIP,EAAYO,QAC1B,IAOF,yBAAK1B,UAAU,OACd,gDACA,kBAAC,EAAD,CAAWW,YAAaA,EAAaC,eAPvC,SAAwBe,GACvBP,EAAeO,EAAMC,OAAOb,UAO1BP,GACA,kBAAC,EAAD,CACCA,SAAUA,EAASqB,QAAO,SAAA9B,GAAO,OAChCA,EAAQM,KAAKyB,cAAcC,SAASpB,EAAYmB,sBCdlCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a3bb4ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nfunction Card({ monster }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"card-container\" key={monster.id}>\r\n\t\t\t\t<img\r\n\t\t\t\t\talt=\"monster\"\r\n\t\t\t\t\tsrc={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n\t\t\t\t/>\r\n\t\t\t\t<h2>{monster.name}</h2>\r\n\t\t\t\t<p>{monster.email}</p>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from '../card/card';\r\n\r\nimport './card-list.styles.css';\r\n\r\nfunction CardList({ monsters }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"card-list\">\r\n\t\t\t\t{monsters && monsters.map(monster => <Card monster={monster} />)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nfunction SearchBox({ searchField, onSearchChange }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"search\"\r\n\t\t\t\tplaceholder=\"search\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tvalue={searchField}\r\n\t\t\t\tonChange={onSearchChange}></input>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nfunction App() {\n\tconst [monsters, setMonsters] = useState(null);\n\tconst [searchField, setSearchField] = useState('');\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => setMonsters(users));\n\t}, []);\n\n\tfunction onSearchChange(event) {\n\t\tsetSearchField(event.target.value);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t<SearchBox searchField={searchField} onSearchChange={onSearchChange} />\n\t\t\t{monsters && (\n\t\t\t\t<CardList\n\t\t\t\t\tmonsters={monsters.filter(monster =>\n\t\t\t\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}